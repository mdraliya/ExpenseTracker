@page "/cash-out"
@using ExpenseTracker.Models
@inject ExpenseTracker.Services.TransactionService TransactionService

<div class="w-11/12 max-w-3xl bg-white p-5 rounded-lg shadow-md">
    <!-- Add Transaction Section -->
    <h1 class="text-center text-2xl font-bold mb-5">Cash Outflow</h1>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="text-red-500 text-center mb-4">@ErrorMessage</div>
    }
    <form class="grid gap-4 mb-5" @onsubmit="HandleSubmit">
        <div>
            <label for="date" class="font-bold">Date:</label>
            <input type="date" id="date" @bind="Transaction.Date" class="w-full p-2 border border-gray-300 rounded-md">
        </div>
        <div>
            <label for="title" class="font-bold">Title:</label>
            <input type="text" id="title" @bind="Transaction.Title" placeholder="Enter title" class="w-full p-2 border border-gray-300 rounded-md">
        </div>
        <div>
            <label for="amount" class="font-bold">Amount:</label>
            <input type="number" id="amount" @bind="Transaction.Amount" placeholder="Enter amount" class="w-full p-2 border border-gray-300 rounded-md">
        </div>
        <div>
            <label for="description" class="font-bold">Description:</label>
            <textarea id="description" @bind="Transaction.Description" placeholder="Enter description" class="w-full p-2 border border-gray-300 rounded-md"></textarea>
        </div>
        <div class="mb-4">
            <label for="category" class="font-bold">Category:</label>
            <select id="category" @bind="Transaction.Category" class="ml-3">
                <option value="Salary">Salary</option>
                <option value="Servicing">Servicing</option>
                <option value="Personal Use">Personal Use</option>
                <option value="Clothing">Clothing</option>
                <option value="Miscellaneous">Miscellaneous</option>
                <option value="Rent">Rent</option>
            </select>
        </div>
        <button type="submit" class="w-full p-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition duration-300">Submit</button>
    </form>

    <!-- Filter Transactions Section -->
    <div class="w-full mt-10 p-5 border border-gray-300 rounded-md bg-gray-50">
        <h2 class="text-lg font-bold mb-3">Filter Transactions</h2>
        <form class="grid gap-4" @onsubmit="HandleFilter">
            <div class="grid grid-cols-3 gap-4">
                <div>
                    <label for="filter-date-range" class="font-bold">Date Range:</label>
                    <input type="date" id="filter-start-date" @bind="Filter.StartDate" class="w-full p-2 border border-gray-300 rounded-md mb-2">
                    <input type="date" id="filter-end-date" @bind="Filter.EndDate" class="w-full p-2 border border-gray-300 rounded-md">
                </div>
                <div>
                    <label for="filter-category" class="font-bold">Category:</label>
                    <select id="filter-category" @bind="Filter.Category" class="w-full p-2 border border-gray-300 rounded-md">
                        <option value="">All</option>
                        <option value="Salary">Salary</option>
                        <option value="Servicing">Servicing</option>
                        <option value="Personal Use">Personal Use</option>
                        <option value="Clothing">Clothing</option>
                        <option value="Miscellaneous">Miscellaneous</option>
                        <option value="Rent">Rent</option>
                    </select>
                </div>
                <div>
                    <label for="filter-title" class="font-bold">Title:</label>
                    <input type="text" id="filter-title" @bind="Filter.Title" placeholder="Search by title" class="w-full p-2 border border-gray-300 rounded-md">
                </div>
            </div>
            <button type="submit" class="w-full mt-3 p-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition duration-300">Filter</button>
        </form>
    </div>

    <!-- Transactions Table -->
    <div class="mt-5 overflow-x-auto">
        <table class="w-full border-collapse border border-gray-300">
            <thead>
                <tr>
                    <th class="p-3 border border-gray-300 bg-gray-200 text-left font-bold">Date</th>
                    <th class="p-3 border border-gray-300 bg-gray-200 text-left font-bold">Title</th>
                    <th class="p-3 border border-gray-300 bg-gray-200 text-left font-bold">Amount</th>
                    <th class="p-3 border border-gray-300 bg-gray-200 text-left font-bold">Description</th>
                    <th class="p-3 border border-gray-300 bg-gray-200 text-left font-bold">Category</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in FilteredTransactions)
                {
                    <tr>
                        <td class="p-3 border border-gray-300">@transaction.Date.ToShortDateString()</td>
                        <td class="p-3 border border-gray-300">@transaction.Title</td>
                        <td class="p-3 border border-gray-300">@transaction.Amount</td>
                        <td class="p-3 border border-gray-300">@transaction.Description</td>
                        <td class="p-3 border border-gray-300">@transaction.Category</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private CashOutflow Transaction = new();
    private string ErrorMessage;

    private FilterCriteria Filter = new();
    private IEnumerable<CashOutflow> FilteredTransactions;

    protected override void OnInitialized()
    {
        FilteredTransactions = TransactionService.GetAllCashOutflows().OfType<CashOutflow>();
    }

    private void HandleSubmit()
    {
        try
        {
            TransactionService.AddCashOutflow(Transaction);
            Transaction = new CashOutflow(); // Reset the form
            ErrorMessage = null;
            ApplyFilter(); // Refresh the filtered list
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
        }
        StateHasChanged();
    }

    private void HandleFilter()
    {
        ApplyFilter();
        StateHasChanged();
    }

    private void ApplyFilter()
    {
        var transactions = TransactionService.GetAllCashOutflows().OfType<CashOutflow>();
        if (Filter.StartDate.HasValue && Filter.EndDate.HasValue)
        {
            transactions = transactions.Where(t => t.Date >= Filter.StartDate && t.Date <= Filter.EndDate);
        }
        if (!string.IsNullOrEmpty(Filter.Category))
        {
            transactions = transactions.Where(t => t.Category == Filter.Category);
        }
        if (!string.IsNullOrEmpty(Filter.Title))
        {
            transactions = transactions.Where(t => t.Title.Contains(Filter.Title, StringComparison.OrdinalIgnoreCase));
        }
        FilteredTransactions = transactions;
    }

    private class FilterCriteria
    {
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string Category { get; set; }
        public string Title { get; set; }
    }
}
