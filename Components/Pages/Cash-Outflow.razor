@page "/cash-out"
@using ExpenseTracker.Models
@inject ExpenseTracker.Services.TransactionService TransactionService

<div class="container">
    <div class="top-container">
        <!-- Cash Outflow Form -->
        <div class="form-container">
            <h1 class="title">Cash Outflow</h1>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="feedback">
                    @ErrorMessage
                </div>
            }
            <form class="form" @onsubmit="HandleSubmit">
                <div class="form-group">
                    <label for="date">Date:</label>
                    <input type="date" id="date" @bind="Transaction.Date" required>
                </div>
                <div class="form-group">
                    <label for="title">Title:</label>
                    <input type="text" id="title" @bind="Transaction.Title" required>
                </div>
                <div class="form-group">
                    <label for="amount">Amount:</label>
                    <input type="number" id="amount" @bind="Transaction.Amount" required>
                </div>
                <div class="form-group">
                    <label for="description">Description:</label>
                    <textarea id="description" @bind="Transaction.Description"></textarea>
                </div>
                <div class="form-group">
                    <label for="category">Category:</label>
                    <select id="category" @bind="Transaction.Category">
                        <option value="Salary">Salary</option>
                        <option value="Servicing">Servicing</option>
                        <option value="Personal Use">Personal Use</option>
                        <option value="Clothing">Clothing</option>
                        <option value="Miscellaneous">Miscellaneous</option>
                        <option value="Rent">Rent</option>
                    </select>
                </div>
                <button type="submit" class="btn-primary">Submit</button>
            </form>
        </div>

        <!-- Filter Transactions -->
        <div class="filter-container">
            <h2 class="subtitle">Filter Transactions</h2>
            <div class="filter-grid">
                <div class="form-group">
                    <label for="type">Category:</label>
                    <select id="type" @bind="Filter.Category">
                        <option value="">All</option>
                        <option value="Salary">Salary</option>
                        <option value="Servicing">Servicing</option>
                        <option value="Personal Use">Personal Use</option>
                        <option value="Clothing">Clothing</option>
                        <option value="Miscellaneous">Miscellaneous</option>
                        <option value="Rent">Rent</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="title">Title:</label>
                    <input type="text" id="title" @bind="Filter.Title" placeholder="Enter title to search">
                </div>
                <div class="form-group">
                    <label for="dateRangeStart">Start Date:</label>
                    <input type="date" id="dateRangeStart" @bind="Filter.StartDate">
                </div>
                <div class="form-group">
                    <label for="dateRangeEnd">End Date:</label>
                    <input type="date" id="dateRangeEnd" @bind="Filter.EndDate">
                </div>
            </div>
            <button type="button" @onclick="HandleFilter" class="btn-secondary">Apply Filters</button>
        </div>
    </div>

    <div class="transactions-container">
        <h2 class="subtitle">Transactions:</h2>
        <div class="table-wrapper">
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Title</th>
                        <th>Amount</th>
                        <th>Description</th>
                        <th>Category</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in FilteredTransactions)
                    {
                        <tr>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>@transaction.Title</td>
                            <td>@transaction.Amount</td>
                            <td>@transaction.Description</td>
                            <td>@transaction.Category</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private CashOutflow Transaction = new();
    private string ErrorMessage;
    private FilterCriteria Filter = new();
    private IEnumerable<CashOutflow> FilteredTransactions;

    protected override void OnInitialized()
    {
        FilteredTransactions = TransactionService.GetAllCashOutflows().OfType<CashOutflow>();
    }

    private void HandleSubmit()
    {
        try
        {
            TransactionService.AddCashOutflow(Transaction);
            Transaction = new CashOutflow(); // Reset the form
            ErrorMessage = null;
            ApplyFilter(); // Refresh the filtered list
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
        }
        StateHasChanged();
    }

    private void HandleFilter()
    {
        ApplyFilter();
        StateHasChanged();
    }

    private void ApplyFilter()
    {
        var transactions = TransactionService.GetAllCashOutflows().OfType<CashOutflow>();
        if (Filter.StartDate.HasValue && Filter.EndDate.HasValue)
        {
            transactions = transactions.Where(t => t.Date >= Filter.StartDate && t.Date <= Filter.EndDate);
        }
        if (!string.IsNullOrEmpty(Filter.Category))
        {
            transactions = transactions.Where(t => t.Category == Filter.Category);
        }
        if (!string.IsNullOrEmpty(Filter.Title))
        {
            transactions = transactions.Where(t => t.Title.Contains(Filter.Title, StringComparison.OrdinalIgnoreCase));
        }
        FilteredTransactions = transactions;
    }

    private class FilterCriteria
    {
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string Category { get; set; }
        public string Title { get; set; }
    }
}

<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    .title, .subtitle {
        text-align: center;
        font-size: 24px;
        margin-bottom: 20px;
    }

    .top-container {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-container, .filter-container {
        flex: 1; /* Equal width for both containers */
        background: #F4F6FF;
        border-radius: 25px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 50px;
        margin-left: 70px;
    }

    .transactions-container {
        background: #ffffff;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-top: 20px;
    }

    .form-group {
        margin-bottom: 15px;
        width: 100%;
    }

        .form-group label {
            display: block;
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .form-group input, .form-group textarea, .form-group select {
            width: 100%;
            padding: 8px;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

    .btn-primary, .btn-secondary {
        display: inline-block;
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        color: white;
    }

    .btn-primary {
        background-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #007bff;
    }

        .btn-secondary:hover {
            background-color: #0056b3;
        }

    .feedback {
        background-color: #d4edda;
        color: #155724;
        padding: 10px;
        border-radius: 5px;
        margin-top: 15px;
        text-align: center;
    }

    .table-wrapper {
        overflow-x: auto;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
    }

        .table th, .table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        .table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
</style>
