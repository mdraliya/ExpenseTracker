@page "/dashboard"
@using ExpenseTracker.Services
@using MudBlazor
@using MudBlazor.Charts
@inject AuthenticationStateService authStateService
@inject NavigationManager navigationManager
@inject TransactionService TransactionService

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f9f9f9;
    }

    .container {
        width: 90%;
        max-width: 1200px;
        margin: 20px auto;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

    header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        header span {
            font-size: 1.2em;
            font-weight: bold;
        }

        header .balance {
            display: flex;
            align-items: center;
        }

            header .balance label {
                font-weight: bold;
                margin-right: 10px;
            }

            header .balance input {
                border: none;
                background-color: #f0f0f0;
                padding: 5px 10px;
                border-radius: 5px;
                width: 80px;
                text-align: right;
            }

    .stats {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .stat-card {
        flex: 1;
        background: #f0f0f0;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
        margin: 0 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .stat-card h2 {
            font-size: 1.2em;
            margin-bottom: 10px;
        }

        .stat-card p {
            font-size: 1.5em;
            font-weight: bold;
        }

    .chart-container {
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        height: 400px;
    }

    .transactions-container {
        display: flex;
        gap: 20px;
        margin-top: 20px;
    }

    .transaction-table {
        flex: 1;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        table th,
        table td {
            padding: 10px;
            border: 1px solid #ccc;
            text-align: left;
        }

        table th {
            background: #f0f0f0;
            font-weight: bold;
        }

    .amount-positive {
        color: #28a745;
    }

    .amount-negative {
        color: #dc3545;
    }
</style>

<div class="container">
    <header>
        <span>Hi User,</span>
        <div class="balance">
            <label for="balance">Available balance:</label>
            <input type="text" id="balance" value="@(TransactionService.GetAvailableBalance().ToString("C"))" readonly>
        </div>
    </header>

    <main>
        <div class="stats">
            <div class="stat-card">
                <h2>Cash In Flow</h2>
                <p>@TransactionService.GetTotalCashInflow().ToString("C")</p>
            </div>
            <div class="stat-card">
                <h2>Cash Out Flow</h2>
                <p>@TransactionService.GetTotalCashOutflow().ToString("C")</p>
            </div>
            <div class="stat-card">
                <h2>Debt</h2>
                <p>@TransactionService.GetTotalDebt().ToString("C")</p>
            </div>
        </div>

        <div class="stats">
            <div class="stat-card">
                <h2>Cleared Debt</h2>
                <p>@TransactionService.GetClearedDebt().ToString("C")</p>
            </div>
            <div class="stat-card">
                <h2>Remaining Debt</h2>
                <p>@TransactionService.GetRemainingDebt().ToString("C")</p>
            </div>
        </div>

        <MudChart ChartType="ChartType.Line"
                  ChartSeries="@Series"
                  XAxisLabels="@XAxisLabels"
                  Width="100%"
                  Height="350px"
                  ChartOptions="@chartOptions"
                  ChartPalette="@(new string[] { "#28a745", "#dc3545" })">
            <CustomGraphics>
                <MudText Typo="Typo.h6" Align="Align.Center">Cash Flow Trends</MudText>
            </CustomGraphics>
        </MudChart>


        <div class="transactions-container">
            <div class="transaction-table">
                <h3>Highest Transactions</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Title</th>
                            <th>Type</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var highestTransactions = new List<(DateTime Date, string Title, string Type, decimal Amount, bool IsPositive)>();

                            // Add cash inflows
                            highestTransactions.AddRange(TransactionService.GetTop5HighestCashInflows()
                            .Select(t => (t.Date, t.Title, "Cash In", t.Amount, true)));

                            // Add cash outflows
                            highestTransactions.AddRange(TransactionService.GetTop5HighestCashOutflows()
                            .Select(t => (t.Date, t.Title, "Cash Out", t.Amount, false)));

                            // Add debts
                            highestTransactions.AddRange(TransactionService.GetTop5HighestDebts()
                            .Select(t => (t.Date, t.Title, "Debt", t.Amount, false)));

                            // Take top 5 by absolute amount
                            var top5Highest = highestTransactions
                            .OrderByDescending(t => Math.Abs(t.Amount))
                            .Take(5);

                            foreach (var transaction in top5Highest)
                            {
                                <tr>
                                    <td>@transaction.Date.ToShortDateString()</td>
                                    <td>@transaction.Title</td>
                                    <td>@transaction.Type</td>
                                    <td class="@(transaction.IsPositive ? "amount-positive" : "amount-negative")">
                                        @(transaction.IsPositive ? "+" : "-")@Math.Abs(transaction.Amount).ToString("C")
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            <div class="transaction-table">
                <h3>Lowest Transactions</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Title</th>
                            <th>Type</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var lowestTransactions = new List<(DateTime Date, string Title, string Type, decimal Amount, bool IsPositive)>();

                            // Add cash inflows
                            lowestTransactions.AddRange(TransactionService.GetTop5LowestCashInflows()
                            .Select(t => (t.Date, t.Title, "Cash In", t.Amount, true)));

                            // Add cash outflows
                            lowestTransactions.AddRange(TransactionService.GetTop5LowestCashOutflows()
                            .Select(t => (t.Date, t.Title, "Cash Out", t.Amount, false)));

                            // Add debts
                            lowestTransactions.AddRange(TransactionService.GetTop5LowestDebts()
                            .Select(t => (t.Date, t.Title, "Debt", t.Amount, false)));

                            // Take bottom 5 by absolute amount
                            var top5Lowest = lowestTransactions
                            .OrderBy(t => Math.Abs(t.Amount))
                            .Take(5);

                            foreach (var transaction in top5Lowest)
                            {
                                <tr>
                                    <td>@transaction.Date.ToShortDateString()</td>
                                    <td>@transaction.Title</td>
                                    <td>@transaction.Type</td>
                                    <td class="@(transaction.IsPositive ? "amount-positive" : "amount-negative")">
                                        @(transaction.IsPositive ? "+" : "-")@Math.Abs(transaction.Amount).ToString("C")
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </main>
</div>

@code {
    private ChartOptions chartOptions = new ChartOptions
        {
            YAxisFormat = "C0",  // Currency format without decimals for cleaner display
            YAxisLines = true,
            XAxisLines = true
        };

    private List<ChartSeries> Series = new List<ChartSeries>();
    private string[] XAxisLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        var user = authStateService.GetAuthenticatedUser();

        if (user == null)
        {
            navigationManager.NavigateTo("/");
            return;
        }

        await LoadChartDataAsync();

        // Subscribe to changes
        TransactionService.OnChange += async () =>
        {
            await LoadChartDataAsync();
            await InvokeAsync(StateHasChanged);
        };
    }
    private async Task LoadChartDataAsync()
    {
        await Task.Run(() =>
        {
            // Get the last 6 months of data
            var endDate = DateTime.Now;
            var startDate = endDate.AddMonths(-5);  // Show last 6 months including current

            var monthRange = Enumerable.Range(0, 6)
                .Select(i => startDate.AddMonths(i))
                .Select(d => new DateTime(d.Year, d.Month, 1))
                .ToList();

            var cashInflows = TransactionService.GetAllCashInflows()
                .Where(t => t.Date >= startDate)
                .GroupBy(t => new DateTime(t.Date.Year, t.Date.Month, 1))
                .ToDictionary(g => g.Key, g => g.Sum(t => t.Amount));

            var cashOutflows = TransactionService.GetAllCashOutflows()
                .Where(t => t.Date >= startDate)
                .GroupBy(t => new DateTime(t.Date.Year, t.Date.Month, 1))
                .ToDictionary(g => g.Key, g => g.Sum(t => t.Amount));

            XAxisLabels = monthRange.Select(date => date.ToString("MMM yy")).ToArray();

            var inflowData = monthRange
                .Select(month => cashInflows.GetValueOrDefault(month, 0))
                .Select(amount => (double)amount)
                .ToArray();

            var outflowData = monthRange
                .Select(month => cashOutflows.GetValueOrDefault(month, 0))
                .Select(amount => (double)amount)
                .ToArray();

            Series = new List<ChartSeries>
                {
            new ChartSeries
            {
                Name = "Cash Inflow",
                Data = inflowData
            },
            new ChartSeries
            {
                Name = "Cash Outflow",
                Data = outflowData
            }
                };
        });
    }


}